{"version":3,"file":"css-to-object.cjs","sources":["src/css-to-object.js"],"sourcesContent":["/**\r\n *\r\n * @param {string} css\r\n */\r\nexport function cssToObject(css) {\r\n    css = replace(\r\n        `:host{${css}}`,\r\n        /**\r\n         * Clean line breaks and normalize spaces\r\n         */\r\n        [/\\s+/g, \" \"],\r\n        /**\r\n         * delete comments\r\n         */\r\n        [/\\/\\*.+?\\*\\//g, \"\"],\r\n        /**\r\n         * Replace double characters with single characters\r\n         */\r\n        [/\\\"/g, `'`],\r\n        /**\r\n         * Add \";\" in case of css compression\r\n         * @example\r\n         * color: black} >> color: black;}\r\n         */\r\n        [/:([^;}]+)}/g, `:$1;}`],\r\n        /**\r\n         * uncomment to add import support\r\n         * [/(@import +[^;]+);/g,`$1{}`],\r\n         */\r\n        /**\r\n         * Capture the selectors and generate an index block for the JSON\r\n         * @example\r\n         * .selector{} >> \".selector\":{}\r\n         */\r\n        [/ *([^;{}]+) *{/g, `\"$1\":{`],\r\n        /**\r\n         * Capture the css blocks \"{}\", to transform the css props into json props\r\n         * @example\r\n         * {width:200px;} >> {\"width\":\"200px\"}\r\n         */\r\n        [/{[^{}]+}/g, props],\r\n        /**\r\n         * Capture the first excludi block when using nested, to transform css props into json props\r\n         * @example\r\n         * {width:200px;&:hover{color:red;}} >> {\"width\":\"200px\"}\r\n         */\r\n        [/{([^\"]+)/g, props],\r\n        /**\r\n         * Fix the union of props\r\n         */\r\n        [/}\"/g, `},\"`],\r\n        /**\r\n         * Fix props separation\r\n         */\r\n        [/, *}/g, `}`]\r\n    );\r\n    return JSON.parse(`{${css}}`);\r\n}\r\n\r\n/**\r\n * formats properties as JSON\r\n * @param {string} block\r\n */\r\nconst props = (block) => block.replace(/([\\w-]+) *: *([^;]+);/g, `\"$1\":\"$2\",`);\r\n\r\n/**\r\n * execute multiple replace on a string based on the given arguments\r\n * @param {string} str\r\n * @param {any[]} args\r\n */\r\nconst replace = (str, ...args) =>\r\n    args.reduce((str, args) => str.replace(...args), str);\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACO,SAAS,WAAW,CAAC,GAAG,EAAE;AACjC,IAAI,GAAG,GAAG,OAAO;AACjB,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;AACvB;AACA;AACA;AACA,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC;AACrB;AACA;AACA;AACA,QAAQ,CAAC,cAAc,EAAE,EAAE,CAAC;AAC5B;AACA;AACA;AACA,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,iBAAiB,EAAE,CAAC,MAAM,CAAC,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC;AAC5B;AACA;AACA;AACA,QAAQ,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;AACtB;AACA;AACA;AACA,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AACtB,KAAK,CAAC;AACN,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAM,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,OAAO,CAAC,wBAAwB,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;AAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC;;;;"}